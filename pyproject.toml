[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

####################
### PKG SPECIFIC ###
####################

[tool.poetry]
name = "fmconfig"
version = "0.0.1"
description = "A package for generating config.xml files for Football Manager graphics"
authors = ["Sebastian Steenssøe <vildmedpap@gmail.com>"]
maintainers = ["Sebastian Steenssøe <vildmedpap@gmail.com>"]
homepage = "https://github.com/vildmedpap/fmconfig"
repository = "https://github.com/vildmedpap/fmconfig"
readme = "README.md"
packages = [{ include = "fmconfig", from = "src" }]

[tool.poetry.dependencies]
python = "~3.11"
typer = "^0.12.3"

[tool.poetry.scripts]
fmconfig = "fmconfig.cli:app"

####################
### DEV SPECIFIC ###
####################

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ipython = "^8.24.0"
mypy = "^1.10.0"
ruff = "^0.4.4"
safety = "^3.2.0"
shellcheck-py = "^0.10.0.1"

#####################
### TEST SPECIFIC ###
#####################

[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-custom_exit_code = "^0.3.0"
pytest-pretty = "^1.2.0"

####################
### TOOLS CONFIG ###
####################

[tool.ruff]
cache-dir = ".cache/ruff"
src = ["src"]
extend-exclude = ["tests"]
target-version = "py311"
line-length = 100
show-fixes = true
force-exclude = true
output-format = "grouped"

[tool.ruff.lint]
ignore-init-module-imports = true
select = [
    # all rules: https://docs.astral.sh/ruff/rules/
    "ANN2", # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "E",    # pycodestyle
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "I",    # isort
    "N",    # pep8-naming
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle
]
ignore = [
    # Docstrings
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__

    # Misc
    "E501",   # line length regulated by formatter
    "PD901",  # df is a bad variable name. Be kinder to your future self.
    "PT011",  # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "COM812", # Trailing comma missing
]
unfixable = [
    "ERA001", # commented-out-code
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

# mypy
[tool.mypy]
python_version = "3.11"
cache_dir = ".cache/mypy"
strict = true
disable_error_code = ["no-any-return"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests", "src"]
addopts = [
    "-vv",
    "--cov-report=term-missing",
    "--cov=fmconfig",
    "--cov-report=html:.cache/pytest/htmlcov",
    "--no-cov-on-fail",
]
console_output_style = "count"
cache_dir = ".cache/pytest"

[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [".venv/*", "*/tests/*", "*/__main__.py"]
